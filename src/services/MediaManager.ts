import { WASocket, downloadMediaMessage, proto } from '@whiskeysockets/baileys';
import { writeFileSync, mkdirSync, existsSync } from 'fs';
import { join, extname } from 'path';
import { AudioConverter, ConversionResult } from './AudioConverter';
import { DocumentCategorizer, DocumentCategory, DocumentTypeInfo } from './DocumentCategorizer';
import logger from '../utils/Logger';

export interface MediaInfo {
  messageId: string;
  sessionId: string;
  fromUser: string;
  mediaType: 'image' | 'video' | 'audio' | 'document' | 'sticker';
  fileName: string;
  filePath: string;
  timestamp: Date;
  originalName?: string;
  mimeType?: string;
  fileSize?: number;
  publicUrl?: string;
  downloaded?: boolean;
  // Informa√ß√µes espec√≠ficas para √°udio
  audioConversion?: {
    converted: boolean;
    originalFormat?: string;
    mp3Path?: string;
    mp3Size?: number;
    conversionTime?: number;
    conversionError?: string;
  };
  // Informa√ß√µes espec√≠ficas para categoriza√ß√£o de documentos
  documentCategory?: {
    category: DocumentCategory;
    subcategory: string;
    description: string;
    folder: string;
    isCode?: boolean;
    isExecutable?: boolean;
    isArchive?: boolean;
  };
}

export class MediaManager {
  private downloadsPath: string;
  private audioConverter: AudioConverter;

  constructor(baseDir: string = './downloads') {
    this.downloadsPath = baseDir;
    this.audioConverter = new AudioConverter(baseDir);
    this.ensureDirectoriesExist();
  }

  private ensureDirectoriesExist(): void {
    // Criar diret√≥rio base
    if (!existsSync(this.downloadsPath)) {
      mkdirSync(this.downloadsPath, { recursive: true });
    }

    logger.info(`üìÅ Diret√≥rio base de m√≠dia criado em: ${this.downloadsPath}`);
  }

  private ensureInstanceDirectoriesExist(instancePhone: string): void {
    const mediaTypes = ['images', 'videos', 'audios', 'stickers'];
    const documentCategories = ['documents', 'codes', 'archives', 'applications', 'others'];
    
    // Criar diret√≥rio da inst√¢ncia
    const instancePath = join(this.downloadsPath, instancePhone);
    if (!existsSync(instancePath)) {
      mkdirSync(instancePath, { recursive: true });
      logger.info(`üìÅ Diret√≥rio criado para inst√¢ncia: ${instancePhone}`);
    }

    // Criar subdiret√≥rios para cada tipo de m√≠dia dentro da inst√¢ncia
    mediaTypes.forEach(type => {
      const typePath = join(instancePath, type);
      if (!existsSync(typePath)) {
        mkdirSync(typePath, { recursive: true });
      }
    });

    // Criar subdiret√≥rios para categorias de documentos
    documentCategories.forEach(category => {
      const categoryPath = join(instancePath, category);
      if (!existsSync(categoryPath)) {
        mkdirSync(categoryPath, { recursive: true });
      }
    });

    logger.info(`üìÇ Estrutura de pastas criada para inst√¢ncia: ${instancePhone}`);
  }

  async processMessage(
    socket: WASocket, 
    sessionId: string,
    message: proto.IWebMessageInfo
  ): Promise<MediaInfo | null> {
    try {
      const messageContent = message.message;
      if (!messageContent) return null;

      const messageId = message.key.id || 'unknown';
      const fromUser = message.key.remoteJid || 'unknown';
      const timestamp = new Date((message.messageTimestamp as number) * 1000);

      // Obter n√∫mero de telefone da inst√¢ncia (usu√°rio do socket)
      const instancePhone = socket.user?.id?.split(":")[0].split("@")[0].replace(/[^0-9]/g, '') || sessionId;
      
      // Garantir que os diret√≥rios existem para esta inst√¢ncia
      this.ensureInstanceDirectoriesExist(instancePhone);

      let mediaInfo: MediaInfo | null = null;

      // Verificar diferentes tipos de m√≠dia
      if (messageContent.imageMessage) {
        mediaInfo = await this.downloadImage(socket, message, sessionId, messageId, fromUser, timestamp, instancePhone);
      } else if (messageContent.videoMessage) {
        mediaInfo = await this.downloadVideo(socket, message, sessionId, messageId, fromUser, timestamp, instancePhone);
      } else if (messageContent.audioMessage) {
        mediaInfo = await this.downloadAudio(socket, message, sessionId, messageId, fromUser, timestamp, instancePhone);
      } else if (messageContent.documentMessage) {
        mediaInfo = await this.downloadDocument(socket, message, sessionId, messageId, fromUser, timestamp, instancePhone);
      } else if (messageContent.stickerMessage) {
        mediaInfo = await this.downloadSticker(socket, message, sessionId, messageId, fromUser, timestamp, instancePhone);
      }

      if (mediaInfo) {
        logger.info(`‚úÖ M√≠dia baixada: ${mediaInfo.mediaType} - ${mediaInfo.fileName}`);
        return mediaInfo;
      }

      return null;
    } catch (error) {
      logger.error(`üî¥ Erro ao processar m√≠dia:`, error);
      return null;
    }
  }

  private async downloadImage(
    socket: WASocket,
    message: proto.IWebMessageInfo,
    sessionId: string,
    messageId: string,
    fromUser: string,
    timestamp: Date,
    instancePhone: string
  ): Promise<MediaInfo | null> {
    try {
      const imageMessage = message.message?.imageMessage;
      if (!imageMessage) return null;

      // Validar se existe media key v√°lida antes de tentar baixar
      if (!imageMessage.mediaKey || imageMessage.mediaKey.length === 0) {
        logger.warn(`‚ö†Ô∏è Imagem sem media key v√°lida - ID: ${messageId}, From: ${fromUser}`);
        return null;
      }

      // Validar se existe URL de download
      if (!imageMessage.url && !imageMessage.directPath) {
        logger.warn(`‚ö†Ô∏è Imagem sem URL de download - ID: ${messageId}, From: ${fromUser}`);
        return null;
      }

      const buffer = await downloadMediaMessage(message, 'buffer', {}) as Buffer;
      if (!buffer || !Buffer.isBuffer(buffer)) return null;

      const extension = this.getImageExtension(imageMessage.mimetype);
      const fileName = `${sessionId}_${messageId}_${timestamp.getTime()}${extension}`;
      const filePath = join(this.downloadsPath, instancePhone, 'images', fileName);

      writeFileSync(filePath, buffer);

      return {
        messageId,
        sessionId,
        fromUser,
        mediaType: 'image',
        fileName,
        filePath,
        timestamp,
        mimeType: imageMessage.mimetype,
        fileSize: buffer.length
      };
    } catch (error) {
      logger.error('üî¥ Erro ao baixar imagem:', error);
      return null;
    }
  }

  private async downloadVideo(
    socket: WASocket,
    message: proto.IWebMessageInfo,
    sessionId: string,
    messageId: string,
    fromUser: string,
    timestamp: Date,
    instancePhone: string
  ): Promise<MediaInfo | null> {
    try {
      const videoMessage = message.message?.videoMessage;
      if (!videoMessage) return null;

      // Validar se existe media key v√°lida antes de tentar baixar
      if (!videoMessage.mediaKey || videoMessage.mediaKey.length === 0) {
        logger.warn(`‚ö†Ô∏è V√≠deo sem media key v√°lida - ID: ${messageId}, From: ${fromUser}`);
        return null;
      }

      // Validar se existe URL de download
      if (!videoMessage.url && !videoMessage.directPath) {
        logger.warn(`‚ö†Ô∏è V√≠deo sem URL de download - ID: ${messageId}, From: ${fromUser}`);
        return null;
      }

      const buffer = await downloadMediaMessage(message, 'buffer', {}) as Buffer;
      if (!buffer || !Buffer.isBuffer(buffer)) return null;

      const extension = this.getVideoExtension(videoMessage.mimetype);
      const fileName = `${sessionId}_${messageId}_${timestamp.getTime()}${extension}`;
      const filePath = join(this.downloadsPath, instancePhone, 'videos', fileName);

      writeFileSync(filePath, buffer);

      return {
        messageId,
        sessionId,
        fromUser,
        mediaType: 'video',
        fileName,
        filePath,
        timestamp,
        mimeType: videoMessage.mimetype,
        fileSize: buffer.length
      };
    } catch (error) {
      logger.error('üî¥ Erro ao baixar v√≠deo:', error);
      return null;
    }
  }

  private async downloadAudio(
    socket: WASocket,
    message: proto.IWebMessageInfo,
    sessionId: string,
    messageId: string,
    fromUser: string,
    timestamp: Date,
    instancePhone: string
  ): Promise<MediaInfo | null> {
    try {
      const audioMessage = message.message?.audioMessage;
      if (!audioMessage) return null;

      // Validar se existe media key v√°lida antes de tentar baixar
      if (!audioMessage.mediaKey || audioMessage.mediaKey.length === 0) {
        logger.warn(`‚ö†Ô∏è √Åudio sem media key v√°lida - ID: ${messageId}, From: ${fromUser}`);
        return null;
      }

      // Validar se existe URL de download
      if (!audioMessage.url && !audioMessage.directPath) {
        logger.warn(`‚ö†Ô∏è √Åudio sem URL de download - ID: ${messageId}, From: ${fromUser}`);
        return null;
      }

      logger.info(`üéµ Processando √°udio: ${audioMessage.mimetype}`);

      const buffer = await downloadMediaMessage(message, 'buffer', {}) as Buffer;
      if (!buffer || !Buffer.isBuffer(buffer)) return null;

      const extension = this.getAudioExtension(audioMessage.mimetype);
      const originalFileName = `${sessionId}_${messageId}_${timestamp.getTime()}${extension}`;
      const originalFilePath = join(this.downloadsPath, instancePhone, 'audios', originalFileName);

      // Salvar arquivo original
      writeFileSync(originalFilePath, buffer);
      logger.info(`üíæ √Åudio original salvo: ${originalFileName}`);

      // Preparar informa√ß√µes b√°sicas do √°udio
      const mediaInfo: MediaInfo = {
        messageId,
        sessionId,
        fromUser,
        mediaType: 'audio',
        fileName: originalFileName,
        filePath: originalFilePath,
        timestamp,
        mimeType: audioMessage.mimetype,
        fileSize: buffer.length,
        audioConversion: {
          converted: false
        }
      };

      // Verificar se precisa converter para MP3
      const originalFormat = extension.substring(1); // Remove o ponto
      
      if (this.audioConverter.isAlreadyMp3(originalFilePath)) {
        logger.info(`‚úÖ √Åudio j√° est√° em MP3: ${originalFileName}`);
        mediaInfo.audioConversion = {
          converted: false, // N√£o foi convertido pois j√° era MP3
          originalFormat: 'mp3'
        };
        return mediaInfo;
      }

      if (!this.audioConverter.isSupportedAudioFile(originalFilePath)) {
        logger.warn(`‚ö†Ô∏è Formato de √°udio n√£o suportado para convers√£o: ${originalFormat}`);
        mediaInfo.audioConversion = {
          converted: false,
          originalFormat,
          conversionError: `Formato ${originalFormat} n√£o suportado para convers√£o`
        };
        return mediaInfo;
      }

      // Realizar convers√£o para MP3
      logger.info(`üîÑ Iniciando convers√£o: ${originalFormat} ‚Üí MP3`);
      const mp3FileName = `${sessionId}_${messageId}_${timestamp.getTime()}.mp3`;
      const mp3FilePath = join(this.downloadsPath, instancePhone, 'audios', mp3FileName);

      const conversionResult: ConversionResult = await this.audioConverter.convertToMp3(
        originalFilePath,
        mp3FilePath,
        {
          quality: 2, // Boa qualidade
          bitrate: '192k'
        }
      );

      if (conversionResult.success) {
        logger.info(`‚úÖ Convers√£o MP3 conclu√≠da: ${mp3FileName}`);
        
        // Atualizar informa√ß√µes para apontar para o MP3
        mediaInfo.fileName = mp3FileName;
        mediaInfo.filePath = mp3FilePath;
        mediaInfo.fileSize = conversionResult.convertedSize;
        mediaInfo.mimeType = 'audio/mpeg';
        
        mediaInfo.audioConversion = {
          converted: true,
          originalFormat,
          mp3Path: mp3FilePath,
          mp3Size: conversionResult.convertedSize,
          conversionTime: conversionResult.conversionTime
        };

        // Opcionalmente, remover arquivo original para economizar espa√ßo
        // this.audioConverter.removeOriginalFile(originalFilePath);
        
      } else {
        logger.error(`üî¥ Erro na convers√£o MP3: ${conversionResult.error}`);
        mediaInfo.audioConversion = {
          converted: false,
          originalFormat,
          conversionError: conversionResult.error
        };
      }

      return mediaInfo;

    } catch (error) {
      logger.error('üî¥ Erro ao baixar/processar √°udio:', error);
      return null;
    }
  }

  private async downloadDocument(
    socket: WASocket,
    message: proto.IWebMessageInfo,
    sessionId: string,
    messageId: string,
    fromUser: string,
    timestamp: Date,
    instancePhone: string
  ): Promise<MediaInfo | null> {
    try {
      const documentMessage = message.message?.documentMessage;
      if (!documentMessage) return null;

      // Validar se existe media key v√°lida antes de tentar baixar
      if (!documentMessage.mediaKey || documentMessage.mediaKey.length === 0) {
        logger.warn(`‚ö†Ô∏è Documento sem media key v√°lida - ID: ${messageId}, From: ${fromUser}`);
        return null;
      }

      // Validar se existe URL de download
      if (!documentMessage.url && !documentMessage.directPath) {
        logger.warn(`‚ö†Ô∏è Documento sem URL de download - ID: ${messageId}, From: ${fromUser}`);
        return null;
      }

      logger.info(`üìÑ Processando documento: ${documentMessage.fileName || 'sem nome'}`);

      const buffer = await downloadMediaMessage(message, 'buffer', {}) as Buffer;
      if (!buffer || !Buffer.isBuffer(buffer)) return null;

      const originalName = documentMessage.fileName || 'documento_sem_nome';
      
      // Categorizar o arquivo usando o DocumentCategorizer
      const categoryInfo: DocumentTypeInfo = DocumentCategorizer.categorizeFile(originalName, documentMessage.mimetype);
      
      logger.info(`üè∑Ô∏è Arquivo categorizado como: ${categoryInfo.description} (${categoryInfo.subcategory})`);
      logger.info(`üìÇ Ser√° salvo na pasta: ${categoryInfo.folder}`);

      // Determinar o tipo de m√≠dia baseado na categoria
      let finalMediaType: 'image' | 'video' | 'audio' | 'document' | 'sticker' = 'document';
      
      // Se for imagem, v√≠deo ou √°udio, usar o tipo espec√≠fico
      if (categoryInfo.category === DocumentCategory.IMAGE) {
        finalMediaType = 'image';
      } else if (categoryInfo.category === DocumentCategory.VIDEO) {
        finalMediaType = 'video';  
      } else if (categoryInfo.category === DocumentCategory.AUDIO) {
        finalMediaType = 'audio';
      }

      // Criar nome do arquivo com timestamp √∫nico
      const fileName = `${sessionId}_${messageId}_${timestamp.getTime()}_${originalName}`;
      const filePath = join(this.downloadsPath, instancePhone, categoryInfo.folder, fileName);

      // Salvar arquivo
      writeFileSync(filePath, buffer);

      // Preparar informa√ß√µes de categoriza√ß√£o para o MediaInfo
      const documentCategory = {
        category: categoryInfo.category,
        subcategory: categoryInfo.subcategory,
        description: categoryInfo.description,
        folder: categoryInfo.folder,
        isCode: DocumentCategorizer.isCodeFile(originalName),
        isExecutable: DocumentCategorizer.isExecutableFile(originalName),
        isArchive: DocumentCategorizer.isArchiveFile(originalName)
      };

      logger.info(`‚úÖ Documento salvo: ${fileName}`);
      logger.info(`üìÅ Pasta: ${categoryInfo.folder}`);
      if (documentCategory.isCode) logger.info(`üíª Detectado como c√≥digo fonte`);
      if (documentCategory.isExecutable) logger.info(`‚ö° Detectado como execut√°vel`);
      if (documentCategory.isArchive) logger.info(`üì¶ Detectado como arquivo compactado`);

      return {
        messageId,
        sessionId,
        fromUser,
        mediaType: finalMediaType,
        fileName,
        filePath,
        timestamp,
        originalName,
        mimeType: documentMessage.mimetype,
        fileSize: buffer.length,
        documentCategory
      };
    } catch (error) {
      logger.error('üî¥ Erro ao baixar/categorizar documento:', error);
      return null;
    }
  }

  private async downloadSticker(
    socket: WASocket,
    message: proto.IWebMessageInfo,
    sessionId: string,
    messageId: string,
    fromUser: string,
    timestamp: Date,
    instancePhone: string
  ): Promise<MediaInfo | null> {
    try {
      const stickerMessage = message.message?.stickerMessage;
      if (!stickerMessage) return null;

      const buffer = await downloadMediaMessage(message, 'buffer', {}) as Buffer;
      if (!buffer || !Buffer.isBuffer(buffer)) return null;

      const extension = this.getStickerExtension(stickerMessage.mimetype);
      const fileName = `${sessionId}_${messageId}_${timestamp.getTime()}${extension}`;
      const filePath = join(this.downloadsPath, instancePhone, 'stickers', fileName);

      writeFileSync(filePath, buffer);

      return {
        messageId,
        sessionId,
        fromUser,
        mediaType: 'sticker',
        fileName,
        filePath,
        timestamp,
        mimeType: stickerMessage.mimetype,
        fileSize: buffer.length
      };
    } catch (error) {
      logger.error('üî¥ Erro ao baixar sticker:', error);
      return null;
    }
  }

  private getImageExtension(mimetype?: string): string {
    switch (mimetype) {
      case 'image/jpeg': return '.jpg';
      case 'image/png': return '.png';
      case 'image/gif': return '.gif';
      case 'image/webp': return '.webp';
      default: return '.jpg';
    }
  }

  private getVideoExtension(mimetype?: string): string {
    switch (mimetype) {
      case 'video/mp4': return '.mp4';
      case 'video/avi': return '.avi';
      case 'video/mov': return '.mov';
      case 'video/webm': return '.webm';
      default: return '.mp4';
    }
  }

  private getAudioExtension(mimetype?: string): string {
    switch (mimetype) {
      case 'audio/mpeg': return '.mp3';
      case 'audio/ogg': return '.ogg';
      case 'audio/wav': return '.wav';
      case 'audio/aac': return '.aac';
      case 'audio/mp4': return '.m4a';
      default: return '.ogg';
    }
  }

  private getDocumentExtension(mimetype?: string): string {
    switch (mimetype) {
      case 'application/pdf': return '.pdf';
      case 'application/msword': return '.doc';
      case 'application/vnd.openxmlformats-officedocument.wordprocessingml.document': return '.docx';
      case 'application/vnd.ms-excel': return '.xls';
      case 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet': return '.xlsx';
      case 'text/plain': return '.txt';
      case 'application/zip': return '.zip';
      case 'application/x-rar-compressed': return '.rar';
      default: return '';
    }
  }

  private getStickerExtension(mimetype?: string): string {
    switch (mimetype) {
      case 'image/webp': return '.webp';
      case 'application/x-tgs': return '.tgs';
      default: return '.webp';
    }
  }

  // Obter estat√≠sticas de categoriza√ß√£o de documentos
  getDocumentCategoryStats(): Record<string, number> {
    return DocumentCategorizer.getStats();
  }

  // Obter informa√ß√µes sobre as categorias suportadas
  getSupportedDocumentCategories(): DocumentCategory[] {
    return DocumentCategorizer.getSupportedCategories();
  }

  // M√©todos utilit√°rios para estat√≠sticas
  getDownloadStats(): any {
    // Podemos implementar estat√≠sticas de download aqui
    return {
      totalDownloads: 0,
      downloadsByType: {},
      downloadsBySession: {}
    };
  }
} 